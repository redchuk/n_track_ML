import pandas as pd
import dabest
import seaborn as sns
from matplotlib import pyplot as plt, rcParams
from numpy import mean, median
import math
from scipy import stats
import shap


'''
Figure 1H Paired data
'''

data_to_plot = pd.read_csv('data/a286935_data_chromatin_live.csv')
#data_to_plot = data_to_plot[~data_to_plot["date"].isin(["20200212"])]
data_to_plot = data_to_plot[data_to_plot["comment"].str.contains('dot')]  # for paired_comp()

data_to_plot = data_to_plot.groupby(['file', 'particle']).agg({'diff_xy_micron':'mean',
                         'area_micron':'mean',
                         'min_dist_micron':'mean',
                         'min_dist/(sqrt(area/pi))':'mean',
                         'perimeter_au_norm':'mean',
                         'time':'first',
                         'date':'first',
                         'comment':'first',
                         'guide':'first'})


def groups(agg_data, t_groups):
    """
    Add column named "group" to a DataFrame, as a result of selection of
    subsets for further analysis.

    agg_data: DataFrame, generated from csv file, as returned by n_track.py
    t_groups: number of subsets needed, currently 2, 3 or 4.

    Return both original dataframe with the "group" column added, and the
    number of subsets.
    """

    if t_groups == 2:
        agg_data.loc[(agg_data["time"] == 0), "group"] = "before"
        agg_data.loc[(agg_data["time"] > 0) & (agg_data["time"] < 20), "group"] = "0-20 min"

    elif t_groups == 3:
        agg_data.loc[(agg_data["time"] == 0), "group"] = "before"
        agg_data.loc[(agg_data["time"] < 40) & (agg_data["time"] > 0), "group"] = "0-40 min"
        agg_data.loc[(agg_data["time"] >= 40), "group"] = ">40 min"

    elif t_groups == 4:
        agg_data.loc[(agg_data["time"] == 0), "group"] = "before"
        agg_data.loc[(agg_data["time"] < 20) & (agg_data["time"] > 0), "group"] = "0-20 min"
        agg_data.loc[(agg_data["time"] < 40) & (agg_data["time"] >= 20), "group"] = "20-40 min"
        agg_data.loc[(agg_data["time"] >= 40), "group"] = "40-60 min"

    return agg_data, t_groups


def paired_comp(grouped, groups_to_plot, parameter):
    """
    Plotting to compare paired data. For these experiments a set of cells was
    imaged before and after the medium change. In a respective dataframe
    'comment' column is used for indexing (to set a unique id for each locus).
    based mainly on DABEST library
    https://acclab.github.io/DABEST-python-docs/tutorial.html
    Nature Methods 2019, 1548-7105. doi:10.1038/s41592-019-0470-3

    grouped:   tuple as returned by groups(agg_data, t_groups), where agg_data
               is a DataFrame and t_groups is time groups number

    groups_to_plot: a tuple of strings, indicating time groups to plot (column
                    names, should be identical to generated by groups())

    parameter:      string; feature under study = column name for plotting


    """
    grouped = grouped[0]
    before = grouped[grouped['group'] == groups_to_plot[0]]
    after = grouped[grouped['group'] == groups_to_plot[1]]
    before.set_index('comment', inplace=True)
    after.set_index('comment', inplace=True)
    combo = pd.concat([before[parameter],
                       after[parameter]], axis=1, join="inner")
    combo.reset_index(inplace=True)
    combo.columns = ['dot', groups_to_plot[0], groups_to_plot[1]]
    two_groups_paired = dabest.load(combo, idx=(groups_to_plot[0],
                                                groups_to_plot[1]),
                                    paired=True, id_col='dot')
    two_groups_paired.mean_diff.plot(raw_marker_size=3, es_marker_size=5)
    plt.show()
    plt.close()

#    print(combo)

paired_comp(groups(data_to_plot, 3), ('before', '0-40 min'), 'min_dist_micron')
